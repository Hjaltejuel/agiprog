@page "/AdminRoadmap"
@attribute [Authorize]
@using System.IO
@using BlazorInputFile
@inject IToastService toastService
@inject RoadmapService roadmapService
@attribute [Authorize]
@using agiprog.Data
<h1>Create Roadmaps</h1>

<hr id="eight" />


<EditForm class="container" Model="@roadmap" OnValidSubmit="@(async () => await HandleValidSubmit())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row md-5">

        <div class="col-md-5">

            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="name">Name of the step</label>
                <InputText type="text" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="roadmap.Name" placeholder="Enter name" />
                <small id="emailHelp" class="form-text text-muted">A good name equals a good start.</small>
            </div>

        </div>
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="description">Description of the step</label>
                <InputTextArea type="text" class="form-control" id="description" aria-describedby="descHelp" @bind-Value="roadmap.Description" placeholder="Enter Description" />
                <small id="descHelp" class="form-text text-muted">A description can never be too small</small>
            </div>
        </div>

    </div>

    <div class="row md-5">
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="image">An image representing the step</label>
                <InputFile type="file" class="form-control-file" id="image" OnChange="@(async (files) => await HandleFileSelected(files))" placeholder="Please choose an image" />
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="video">An optional URL for a video representing the step</label>
                <select class="selectpicker" multiple data-live-search="true">
                    <option>Mustard</option>
                    <option>Ketchup</option>
                    <option>Relish</option>
                </select>
            </div>
        </div>

    </div>

    <div class="row md-5">
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <img class="mr-3" src="@imageDataUrl">
            </div>
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<h1>Created steps</h1>

<div style="max-height:500px; overflow:scroll" class="list-group">
    @foreach (var s in roadmaps)
    {
        <div @onclick="() => select(s.RoadmapID)" class="list-group-item list-group-item-action flex-column align-items-start @(ActiveMessageId == s.RoadmapID ? "active" : "")">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1 text-black-50">Name : @s.Name</h5>
                <div>
                    <button class="btn btn-danger" @onclick="() => delete(s)">Delete</button>
                    <button type="button" @onclick="() => setModal(s)" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                        Launch view
                    </button>
                </div>
            </div>
            <p class="mb-1 text-black-50">Description : @s.Description</p>

        </div>
    }
</div>


<div style="max-height:800px; overflow:scroll" class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black-50" id="exampleModalLongTitle">@Modal.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Description : @Modal.Description
                <img style="max-width:100%" class="mr-3" src="@Modal.Image">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    private Roadmap roadmap = new Roadmap();
    
    private Roadmap Modal = new Roadmap();

    private String imageDataUrl { get; set; }

    private List<Roadmap> roadmaps;

    private int ActiveMessageId { get; set; }


    private List<String> AllowedExtensions = new List<string> { ".png", ".jpg" };

    private void setModal(Roadmap step)
    {
        this.Modal = step;

    }

    protected override void OnInitialized()
    {
        roadmaps = roadmapService.FindAllRoadmaps();
    }

    private async Task delete(Roadmap roadmap)
    {
        roadmaps.Remove(roadmap);
        await roadmapService.RemoveRoadmap(roadmap);
        toastService.ShowSuccess("Roadmap deleted");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        roadmaps.Add(roadmap);
        await roadmapService.AddRoadmap(roadmap);
        toastService.ShowSuccess("Roadmap saved");
        roadmap = new Roadmap();
        StateHasChanged();
    }

    private void select(int id)
    {
        ActiveMessageId = id;
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.First();
        if (file == null)
        {
            toastService.ShowError("Uploaded file did not exist");
            return;
        }

        // Create a new instance of a 'FileInfo' object.
        FileInfo fileInfo = new FileInfo(file.Name);

        // I don't know if it's even possible for an extension to be upper case
        var extension = fileInfo.Extension.ToLower();

        // verify the extension exists
        if (!String.IsNullOrWhiteSpace(fileInfo.Extension))
        {

            var format = "image/png";
            // If the allowed extensions // fixed issue where uploading
            if (AllowedExtensions.Contains(fileInfo.Extension.ToLower()))
            {
                var resizedImageFile = await file.ToImageFileAsync(format,
               1000, 1000);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.Data.ReadAsync(buffer);
                var imageDataUrl =
                    $"data:{format};base64,{Convert.ToBase64String(buffer)}";

                this.imageDataUrl = imageDataUrl;

                roadmap.Image = this.imageDataUrl;
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("You must give either .png or .jpg format");
                return;
            }
        }
        else
        {
            toastService.ShowError("Your file must have an extension");
            return;
        }

    }
}

