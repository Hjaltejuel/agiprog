@page "/AdminRoadmap"
@attribute [Authorize]
@using System.IO
@using BlazorInputFile
@inject IToastService toastService
@inject RoadmapService roadmapService
@inject IJSRuntime JSRuntime
@inject StepService stepService
@inject agiprog.Areas.Identity.Data.IDbContextFactory<agiprogContext> DbFactory
@attribute [Authorize]
@using agiprog.Data

<h1>Create Roadmaps</h1>

<hr id="eight" />


<EditForm class="container" Model="@roadmap" OnValidSubmit="@(async () => await HandleValidSubmit())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row md-5">

        <div class="col-md-5">

            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="name">Name of the roadmap</label>
                <InputText type="text" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="roadmap.Name" placeholder="Enter name" />
                <small id="emailHelp" class="form-text text-muted">A good name equals a good start.</small>
            </div>

        </div>
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="description">Description of the roadmap</label>
                <InputTextArea type="text" class="form-control" id="description" aria-describedby="descHelp" @bind-Value="roadmap.Description" placeholder="Enter Description" />
                <small id="descHelp" class="form-text text-muted">A description can never be too small</small>
            </div>
        </div>

    </div>

    <div class="row md-5">
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="image">An image representing the roadmap</label>
                <InputFile type="file" class="form-control-file" id="image" OnChange="@(async (files) => await HandleFileSelected(files))" placeholder="Please choose an image" />
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="selecter">Select the steps for this roadmap</label>
                <select class="selectpicker" id="selecter" multiple>
                    @foreach (var step in steps)
                    {
                        <option>@step.Key</option>
                    }
                </select>
            </div>
        </div>

    </div>

    <div class="row md-5">
        <div class="col-md-5">
            <div class="form-group align-items-center">
                <img style="max-width:100%" class="mr-3" src="@imageDataUrl">
            </div>
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<h1>Created roadmaps</h1>

<div style="max-height:500px; overflow:@overflow" class="list-group">
    @foreach (var s in roadmaps)
    {
        <div @onclick="() => select(s.NewRoadmapId)" class="list-group-item list-group-item-action flex-column align-items-start @(ActiveMessageId == s.NewRoadmapId ? "active" : "")">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1 text-black-50">Name : @s.Name</h5>
                <div>
                    <button class="btn btn-danger" @onclick="() => delete(s)">Delete</button>
                    <button type="button" @onclick="() => setModal(s)" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                        Launch view
                    </button>
                </div>
            </div>
            <p class="mb-1 text-black-50">Description : @s.Description</p>

        </div>
    }
</div>


<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black-50" id="exampleModalLongTitle">@Modal.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="Content" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Content</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" @onclick="@(async () => await initialize())" id="Edit" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Edit</a>
                    </li>

                </ul>
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="Content">
                        Description : @Modal.Description
                        <img style="max-width:100%" class="mr-3" src="@Modal.Image">

                        <div style="max-height:500px; overflow:scroll" class="list-group">
                            @if (roadmapSteps != null)
                            {
                                @foreach (var s in roadmapSteps)
                                {
                                    <div @onclick="() => select(s.StepId)" class="list-group-item list-group-item-action flex-column align-items-start @(ActiveMessageId == s.StepId ? "active" : "")">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1 text-black-50">Name : @s.Name</h5>

                                        </div>
                                        <p class="mb-1 text-black-50">Description : @s.Description</p>
                                        <small>Video URL : @(s.VideoUrl == null ? "No video defined" : s.VideoUrl)</small>

                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="Edit">
                        <EditForm class="container" Model="@Modal" OnValidSubmit="@(async () => await HandleValidSubmitUpdate())">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row md-5">

                                <div class="col-md-5">

                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="name">Name of the roadmap</label>
                                        <InputText type="text" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="@Modal.Name" placeholder="Enter name" />
                                        <small id="emailHelp" class="form-text text-muted">A good name equals a good start.</small>
                                    </div>

                                </div>
                                <div class="col-md-5">
                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="description">Description of the roadmap</label>
                                        <InputTextArea type="text" class="form-control" id="description" aria-describedby="descHelp" @bind-Value="@Modal.Description" placeholder="Enter Description" />
                                        <small id="descHelp" class="form-text text-muted">A description can never be too small</small>
                                    </div>
                                </div>

                            </div>

                            <div class="row md-5">
                                <div class="col-md-5">
                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="image">An image representing the roadmap</label>
                                        <InputFile type="file" class="form-control-file" id="image" OnChange="@(async (files) => await HandleFileSelectedUpdated(files))" placeholder="Please choose an image" />
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="selecter2">Select the steps for this roadmap</label>
                                        <select class="selectpicker" id="selecter2" multiple>
                                            @foreach (var step in steps)
                                            {
                                                <option>@step.Key</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                            </div>

                            <div class="row md-5">
                                <div class="col-md-5">
                                    <div class="form-group align-items-center">
                                        <img style="max-width:100%" class="mr-3" src="@imageDataUrlUpdate">
                                    </div>
                                </div>
                            </div>


                            <button class="btn btn-primary" type="submit">Submit</button>
                        </EditForm>


                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {

    private NewRoadmap roadmap = new NewRoadmap();

    private NewRoadmap Modal = new NewRoadmap();


    private String overflow { get; set; }

    private Dictionary<String, Step> steps { get; set; }

    private String imageDataUrl { get; set; }

    private String imageDataUrlUpdate { get; set; }

    private List<NewRoadmap> roadmaps;

    private int ActiveMessageId { get; set; }

    private bool isInited { get; set; }

    private List<String> AllowedExtensions = new List<string> { ".png", ".jpg" };

    private List<Step> roadmapSteps { get; set; }

    private void setModal(NewRoadmap step)
    {
        using var Context = DbFactory.CreateDbContext();
        this.Modal = step;
        this.roadmapSteps = roadmapService.FindAllNewRoadmapStepsForNewRoadmap(step,Context);
    }

    private async Task initialize()
    {
        if(!isInited)
            await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#selecter2");
        isInited = true;
    }

    protected override void OnInitialized()
    {
        using var Context = DbFactory.CreateDbContext();
        roadmaps = roadmapService.FindAllNewRoadmaps(Context);
        roadmaps.ForEach(r => r.RoadmapSteps.ToList());
        if (roadmaps != null && roadmaps.Count != 0)
        {
            overflow = "scroll";
        }
        else
        {
            overflow = "none";
        }
        steps = stepService.FindAllSteps(Context).ToDictionary(a => a.Name);
    }

    private async Task delete(NewRoadmap roadmap)
    {
        using var Context = DbFactory.CreateDbContext();
        roadmaps.Remove(roadmap);
        await roadmapService.RemoveNewRoadmap(roadmap,Context);
        toastService.ShowSuccess("Roadmap deleted");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (SelectedValue == null || SelectedValue.Length == 0)
        {
            toastService.ShowError("No steps defined, please add steps before creating a roadmap");
        }
        else
        {
            using var Context = DbFactory.CreateDbContext();

            var stepsL = SelectedValue.Select(i =>  steps[i]).ToList();
            var roadmapL = await roadmapService.AddNewRoadmap(roadmap, stepsL, Context);


            roadmaps.Add(roadmapL);
            toastService.ShowSuccess("Roadmap saved");
            roadmap = new NewRoadmap();
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmitUpdate()
    {
        if (SelectedValue == null || SelectedValue.Length == 0)
        {
            toastService.ShowError("No steps defined, please add steps before creating a roadmap");
        }
        else
        {
            using var Context = DbFactory.CreateDbContext();
            var selectedRoadmapSteps = SelectedValue.Select(i => new RoadmapStep() { Step = steps[i], NewRoadmap = Modal }).ToList();
            await roadmapService.UpdateNewRoadmap(Modal, selectedRoadmapSteps, Context);
            roadmapSteps = selectedRoadmapSteps.Select(s => s.Step).ToList();
            toastService.ShowSuccess("Roadmap saved");
            StateHasChanged();
        }
    }

    private void select(int id)
    {
        ActiveMessageId = id;
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.First();
        if (file == null)
        {
            toastService.ShowError("Uploaded file did not exist");
            return;
        }

        // Create a new instance of a 'FileInfo' object.
        FileInfo fileInfo = new FileInfo(file.Name);

        // I don't know if it's even possible for an extension to be upper case
        var extension = fileInfo.Extension.ToLower();

        // verify the extension exists
        if (!String.IsNullOrWhiteSpace(fileInfo.Extension))
        {

            var format = "image/png";
            // If the allowed extensions // fixed issue where uploading
            if (AllowedExtensions.Contains(fileInfo.Extension.ToLower()))
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                string imageBase64Data = Convert.ToBase64String(ms.ToArray());
                var imageDataUrl =
                          $"data:{format};base64,{imageBase64Data}";


                this.imageDataUrl = imageDataUrl;

                roadmap.Image = this.imageDataUrl;
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("You must give either .png or .jpg format");
                return;
            }
        }
        else
        {
            toastService.ShowError("Your file must have an extension");
            return;
        }

    }


    private async Task HandleFileSelectedUpdated(IFileListEntry[] files)
    {
        var file = files.First();
        if (file == null)
        {
            toastService.ShowError("Uploaded file did not exist");
            return;
        }

        // Create a new instance of a 'FileInfo' object.
        FileInfo fileInfo = new FileInfo(file.Name);

        // I don't know if it's even possible for an extension to be upper case
        var extension = fileInfo.Extension.ToLower();

        // verify the extension exists
        if (!String.IsNullOrWhiteSpace(fileInfo.Extension))
        {

            var format = "image/png";
            // If the allowed extensions // fixed issue where uploading
            if (AllowedExtensions.Contains(fileInfo.Extension.ToLower()))
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                string imageBase64Data = Convert.ToBase64String(ms.ToArray());
                var imageDataUrl =
                          $"data:{format};base64,{imageBase64Data}";


                this.imageDataUrlUpdate = imageDataUrl;

                Modal.Image = this.imageDataUrlUpdate;
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("You must give either .png or .jpg format");
                return;
            }
        }
        else
        {
            toastService.ShowError("Your file must have an extension");
            return;
        }

    }
    // inject jsruntime to call javascript code


    // hold the callback selected value
    public string[] SelectedValue { get; set; }

    // call the javascript method to init the select picker
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // only needs to be called once per page render
        {
            await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#selecter");
        }
    }

    // method which will be triggered by javascript, need to pass the method name
    [JSInvokable]
    public void OnSelectedValue(string[] val)
    {
        SelectedValue = val;
        StateHasChanged();
    }
}

