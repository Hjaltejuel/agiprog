@page "/AdminMeeting"
@attribute [Authorize]
@using System.IO
@using BlazorInputFile
@inject IToastService toastService
@inject RoadmapService roadmapService
@inject IJSRuntime JSRuntime
@inject StepService stepService
@inject MeetingService meetingService
@inject agiprog.Areas.Identity.Data.IDbContextFactory<agiprogContext> DbFactory
@attribute [Authorize]
@using agiprog.Data

<h1>Create client</h1>

<hr id="eight" />


<EditForm class="container" Model="@meeting" OnValidSubmit="@(async () => await HandleValidSubmit())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row md-5">

        <div class="col-md-5">

            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="name">Name of the client</label>
                <InputText type="text" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="meeting.Name" placeholder="Enter name" />
                <small id="emailHelp" class="form-text text-muted">A good name equals a good start.</small>
            </div>

        </div>

        <div class="col-md-5">
            <div class="form-group align-items-center">
                <label class="font-weight-bold" for="selecter">Select the roadmap for this client</label>
                <select class="selectpicker" id="selecter" multiple>
                    @foreach (var step in roadmaps)
                    {
                        <option>@step.Key</option>
                    }
                </select>
            </div>
        </div>


    </div>
    @if (StepDates != null)
    {
        <div class="row md-5">

            <div class="col-md-5">

                <label class="font-weight-bold" for="names">Select start dates of selected steps in roadmap</label>
                <div style="max-height:500px; overflow:@overflow" class="list-group" id="names">
                    <div class="form-group align-items-center">
                        @foreach (var date in StepDates)
                        {
                            <label class="font-weight-bold" for="name">@date.Step.Name</label>
                            <InputDate type="date" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="date.Date" placeholder="Enter date" />
                        }
                    </div>
                </div>

            </div>



        </div>
    }

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<h1>Created clients</h1>

<div style="max-height:500px; overflow:@overflow" class="list-group">
    @foreach (var s in meetings)
    {
        <div @onclick="() => select(s.MeetingId)" class="list-group-item list-group-item-action flex-column align-items-start @(ActiveMessageId == null ? "" : ActiveMessageId.Equals(s.MeetingId) ? "active" : "")">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1 text-black-50">Name : @s.Name</h5>
                <div>
                    <button class="btn btn-danger" @onclick="() => delete(s)">Delete</button>
                    <button type="button" @onclick="@(async () => await setModal(s))" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                        Launch view
                    </button>
                </div>
            </div>
            <small>Meeting id : @(s.MeetingId)</small>
        </div>
    }
</div>


<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black-50" id="exampleModalLongTitle">@Modal.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="Content" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Content</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" @onclick="@(async () => await initialize())" id="Edit" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Edit</a>
                    </li>

                </ul>
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="Content">
                        <div>
                            ID : @Modal.MeetingId;
                        </div>
                        <div>
                            Completed Steps : @Modal.CompletedSteps;
                        </div>

                        <div style="max-height:500px; overflow:scroll" class="list-group">
                            @if (ModalRoadmap != null)
                            {
                                <div @onclick="() => subSelect(ModalRoadmap.NewRoadmapId)" class="list-group-item list-group-item-action flex-column align-items-start @(SubActiveMessageId == ModalRoadmap.NewRoadmapId ? "active" : "")">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1 text-black-50">Name : @ModalRoadmap.Name</h5>

                                    </div>
                                    <p class="mb-1 text-black-50">Description : @ModalRoadmap.Description</p>
                                    <img style="max-width:100%" class="mr-3" src="@ModalRoadmap.Image">
                                </div>

                            }
                        </div>
                    </div>
                    <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="Edit">
                        <EditForm class="container" Model="@Modal" OnValidSubmit="@(async () => await HandleValidSubmitUpdate())">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row md-5">

                                <div class="col-md-5">

                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="name">Name of the client</label>
                                        <InputText type="text" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="meeting.Name" placeholder="Enter name" />
                                        <small id="emailHelp" class="form-text text-muted">A good name equals a good start.</small>
                                    </div>

                                </div>

                                <div class="col-md-5">
                                    <div class="form-group align-items-center">
                                        <label class="font-weight-bold" for="selecter">Select the roadmap for this client</label>
                                        <select class="selectpicker" id="selecter2" multiple>
                                            @foreach (var step in roadmaps)
                                            {
                                                <option>@step.Key</option>
                                            }
                                        </select>
                                    </div>
                                </div>


                            </div>
                            @if (StepDates != null)
                            {
                                <div class="row md-5">

                                    <div class="col-md-5">

                                        <label class="font-weight-bold" for="names">Select start dates of selected steps in roadmap</label>
                                        <div style="max-height:500px; overflow:@overflow" class="list-group" id="names">
                                            <div class="form-group align-items-center">
                                                @foreach (var date in StepDates)
                                                {
                                                    <label class="font-weight-bold" for="name">@date.Step.Name</label>
                                                    <InputDate type="date" class="form-control" id="name" aria-describedby="emailHelp" @bind-Value="date.Date" placeholder="Enter date" />
                                                }
                                            </div>
                                        </div>

                                    </div>



                                </div>
                            }

                            <button class="btn btn-primary" type="submit">Submit</button>
                        </EditForm>


                    </div>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {

    private List<StepDate> StepDates = new List<StepDate>();

    private Meeting meeting = new Meeting();

    private Meeting Modal = new Meeting();

    private NewRoadmap ModalRoadmap { get; set; }

    private String overflow { get; set; }

    private Dictionary<String, NewRoadmap> roadmaps { get; set; }

    private String imageDataUrl { get; set; }

    private List<Meeting> meetings;

    private String ActiveMessageId { get; set; }

    private int SubActiveMessageId { get; set; }

    private bool isInited { get; set; }

    private async Task setModal(Meeting step)
    {
        using var Context = DbFactory.CreateDbContext();
        this.Modal = step;
        if(step.NewRoadmapId != null)
            this.ModalRoadmap = await roadmapService.FindNewRoadmap(step.NewRoadmapId.Value, Context);

    }


    private async Task initialize()
    {
        if (!isInited)
            await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#selecter2");
        isInited = true;
    }

    protected override void OnInitialized()
    {
        using var Context = DbFactory.CreateDbContext();
        ActiveMessageId = "";
        meetings = meetingService.FindAllMeetings(Context);
        if (meetings != null && meetings.Count != 0)
        {
            overflow = "scroll";
        }
        else
        {
            overflow = "none";
        }
        roadmaps = roadmapService.FindAllNewRoadmaps(Context).ToDictionary(a => a.Name);
    }

    private async Task delete(Meeting meeting)
    {
        using var Context = DbFactory.CreateDbContext();
        meetings.Remove(meeting);
        await meetingService.RemoveMeeting(meeting,Context);
        toastService.ShowSuccess("Meeting deleted");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (SelectedValue == null)
        {
            toastService.ShowError("No steps defined, please add steps before creating a roadmap");
        }
        else
        {

            using var Context = DbFactory.CreateDbContext();

            meeting.NewRoadmapId = roadmaps[SelectedValue].NewRoadmapId;
            var meetingL = await meetingService.AddMeeting(meeting, StepDates, Context);
            meetings.Add(meetingL);
            toastService.ShowSuccess("Meeting saved");
            StepDates = new List<StepDate>();
            meeting = new Meeting();
            StateHasChanged();

        }
    }


    private async Task HandleValidSubmitUpdate()
    {
        if (SelectedValue == null)
        {
            toastService.ShowError("No steps defined, please add steps before creating a roadmap");
        }
        else
        {

            using var Context = DbFactory.CreateDbContext();
            Modal.NewRoadmapId = roadmaps[SelectedValue].NewRoadmapId;
            await meetingService.UpdateMeeting(Modal, StepDates, Context);

            toastService.ShowSuccess("Roadmap saved");
            StateHasChanged();

        }
    }

    private void select(String id)
    {
        ActiveMessageId = id;
    }
    private void subSelect(int id)
    {
        SubActiveMessageId = id;
    }

    // hold the callback selected value
    public string SelectedValue { get; set; }

    // call the javascript method to init the select picker
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // only needs to be called once per page render
        {
            await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", ".selectpicker");
        }
    }

    // method which will be triggered by javascript, need to pass the method name
    [JSInvokable]
    public void OnSelectedValue(string[] values)
    {
        if (values != null && values.Length > 1)
        {
            toastService.ShowError("You can only select one roadmap for a meeting.");
        }
        if (values != null && values.Length != 0)
        {
            using var Context = DbFactory.CreateDbContext();
            SelectedValue = values.First();
            StepDates = roadmapService.FindAllNewRoadmapStepsForNewRoadmap(roadmaps[SelectedValue],Context).Select(step => new StepDate() { MeetingId = null, StepId = step.StepId, Step = step, Date = DateTime.Now }).ToList();
        }
        else
        {
            SelectedValue = null;
            StepDates = new List<StepDate>();
        }
        StateHasChanged();
    }
}

