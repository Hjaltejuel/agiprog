@page "/meeting/{MeetingId}"
@using agiprog.Data
@inject MeetingService meetingService
@inject RoadmapService roadmapService
@inject agiprog.Areas.Identity.Data.IDbContextFactory<agiprogContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<section>
    <div class="wrapper">
        <h1 id="bouncetext" class="bouncetext alpha lato thin thick-header-line uppercase ls-small">
            Welcome to your progress board : @(Roadmap?.Name)
        </h1>
        <h5 style="width:100%" class="text-md-center">
            @(Roadmap?.Description)
        </h5>
    </div>
</section>

@if (Roadmap?.RoadmapSteps != null)
{
<div class="roadmap">

    @{var i = 1; }
    @foreach (var step in RoadmapSteps.Select(s => s.Step))
    {
        <div class="box @(i%2 == 0 ? "right" : "left")">
            <agiprog.Components.Box stepId="@step.StepId" date="@StepDates.Find(d => d.StepId == step.StepId).Date" OnClick="setModal"></agiprog.Components.Box>
        </div>
        i++;
    }

</div>
    }
    else
    {
        <div>
            loading...
        </div>
    }
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered" style="" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h5 class="modal-title bold" id="exampleModalLongTitle">@Modal.Name</h5>
                    <p>@StepDates.Find(d => d.StepId == @Modal.StepId)?.Date.ToString("yyyy/MM/dd")</p>
                </div>
                <button type="button" @onclick="@(async () => await Refresh())" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div style="display:block;"class="row modal-item-purp">
                            <div>
                                <h5>Description</h5>
                            </div>
                            <div>
                                @Modal.Description
                            </div>

                        </div>
                        <div class="row">
                            <img style="max-width:100%; width:100%" class="mr-3" src="@Modal.Img">
                        </div>
                    </div>
                    <div class="col">
                        <div class="modal-item">
                            <iframe style="width:100%; height:25em;" src="@Modal.VideoUrl"></iframe>
                        </div>
                        <div class="modal-item">
                            <ChatRoom @ref="ChatRoom" stepId="@Modal.StepId" meetingId="@MeetingId"></ChatRoom>
                        </div>
                    </div>

                </div>

     
 
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="@(async () => await Refresh())" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public String MeetingId { get; set; }

    private Step Modal = new Step();

    private ChatRoom ChatRoom;

    private NewRoadmap Roadmap;

    private List<RoadmapStep> RoadmapSteps;

    private List<StepDate> StepDates = new List<StepDate>();

    public agiprog.Data.Meeting meeting { get; set; }

    private bool fadeaway { get; set; }

    private void setModal(Step step)
    {
        this.Modal = step;
        StateHasChanged();

    }

    private async Task Refresh()
    {
        await ChatRoom.DisconnectAsync();
        StateHasChanged();
    }

    private void cfadeaway()
    {
        fadeaway = true;
    }

    private async Task complete()
    {
        using var Context = DbFactory.CreateDbContext();
        meeting.CompletedSteps = meeting.CompletedSteps + 1;
        await meetingService.UpdateMeeting(meeting,Context);
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        using var Context = DbFactory.CreateDbContext();
        fadeaway = false;
        var result = await meetingService.FindMeeting(MeetingId,Context);
        if (result == null)
            NavigationManager.NavigateTo("/");
        meeting = result;
        Roadmap = result.Roadmap;
        StepDates = result.StepDates;
        RoadmapSteps = Roadmap.RoadmapSteps;
        StateHasChanged();


    }

    public async Task takeQuizz()
    {
        await NavigateToUrlAsync("https://www.ugilic.dk",true);
    }

    public async Task NavigateToUrlAsync(string url, bool openInNewTab)
    {
        if (openInNewTab)
        {
            
            await JSRuntime.InvokeAsync<object>("open", new Object[] { url, "_blank" });
        }
    }

}
