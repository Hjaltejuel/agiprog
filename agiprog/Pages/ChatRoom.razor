@page "/chatroom"
@inject NavigationManager navigationManager
@inject HubService hub
@inject MeetingService MeetingService
@inject MessageService MessageService
@inject agiprog.Areas.Identity.Data.IDbContextFactory<agiprogContext> DbFactory
@using agiprog.Data
@using Microsoft.AspNetCore.SignalR.Client

<h1>Give feedback and explain your problems</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
        @if (total > loaded)
        {
            <button class="btn btn-primary" @onclick="@(async () => await LoadMore())">Load more entities </button>
        }
    </div>
    // display messages

    <div style="max-height:700px; overflow:scroll" id="scrollbox">

        @foreach (var item in _messages)
        {
            @if (IsNotice(item))
            {
                <div class="alert alert-info">@item.Chat</div>
            }
            else
            {
                <div class="@getCss(item)">
                    <div class="user">@item.User</div>
                    <p>@item.At</p>
                    <div class="msg">@item.Chat</div>
                    <button class="btn btn-primary" @onclick="@(async () =>await Delete(item))">Delete message</button>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    private int loaded { get; set; }

    private int total { get; set; }

    [Parameter]
    public int stepId { get; set; }

    [Parameter]
    public string meetingId { get; set; }

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<MessageBody> _messages = new List<MessageBody>();


    private async Task Delete(MessageBody message)
    {
        using var Context = DbFactory.CreateDbContext();
        _messages.Remove(message);
        await MessageService.RemoveMessageBody(message,Context);
        await hub.SendDeleteMessageToGroup(stepId, meetingId, message.MessageBodyId );
    }
    public async Task LoadMore()
    {
        using var Context = DbFactory.CreateDbContext();
        AppendMessages(await MessageService.FindMessageBodies(meetingId, stepId, loaded, loaded + 10, Context));
        loaded = loaded + 10;

    }
    private bool IsNotice(MessageBody message)
    {
        return message.Chat.StartsWith("[Notice]");
    }

    private String getCss(MessageBody message)
    {
        return message.User.Equals(_username, StringComparison.OrdinalIgnoreCase) ? "sent" : "received";
    }
    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);
            using var Context = DbFactory.CreateDbContext();
            // remove old messages if any
            _messages.Clear();

            var message = await MessageService.FindMessage(stepId, meetingId,Context);

            if (message == null)
            {
                message = new Message() { MeetingId = meetingId, StepId = stepId, MessageBodies = new List<MessageBody>() };
                await MessageService.AddMessage(message,Context);
            }
            LoadInitial(await MessageService.FindMessageBodies(meetingId, stepId, 0, 10, Context));
            loaded = 10;

            total = await MessageService.CountBodies(meetingId, stepId, Context);

            await hub.StartConnectionAsync(BroadcastMessage, BroadcastRemoveMessage);
            await hub.JoinGroup(stepId, meetingId, _username);
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(MessageBody message)
    {

        _messages.Add(message);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }
    private void BroadcastRemoveMessage(int messageId)
    {

        var mes = _messages.Find(a => a.MessageBodyId.Equals(messageId));
        _messages.Remove(mes);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }
    private void LoadInitial(List<MessageBody> messages)
    {
        messages.Reverse();
        _messages.AddRange(messages);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private void AppendMessages(List<MessageBody> messages)
    {
        messages.Reverse();
        _messages.InsertRange(0, messages);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    public async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await hub.Disconect(stepId, meetingId, _username);

            _isChatting = false;

            // remove old messages if any
            _messages.Clear();

            _message = null;

            StateHasChanged();
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            using var Context = DbFactory.CreateDbContext();
            var time = DateTime.Now;
            var entity = new MessageBody { At = time, Chat = message, User = _username, MeetingId = meetingId, StepId = stepId };
            await MessageService.AddMessageBody(entity, Context);
            var body = new MessageBody { MessageBodyId = entity.MessageBodyId, At = entity.At, Chat = entity.Chat, MeetingId = entity.MeetingId, StepId = entity.StepId, User = entity.User };
            await hub.SendMessageToGroup(stepId, meetingId, body);

            _newMessage = string.Empty;
        }
    }


}